* General configs
  #+BEGIN_SRC emacs-lisp
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (toggle-scroll-bar -1)
    (display-time-mode 1)
    (fset 'yes-or-no-p 'y-or-n-p)
    (column-number-mode t)
    (global-linum-mode)
    (show-paren-mode)
    (setq display-time-day-and-date 1)
    (setq inhibit-startup-screen t)
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
    (progn
      (global-unset-key (kbd "C-x C-c"))
      (global-set-key (kbd "C-x C-.") 'save-buffers-kill-terminal))
    (setq custom-file "~/.emacs.d/custom.el")
    (unless (file-exists-p custom-file)
      (write-region "" nil custom-file))
    (load custom-file)

    (progn ; backup files settings
      (setq backup-directory-alist `(("." . "~/.saves"))
            backup-by-copying t
            delete-old-versions t
            kept-new-versions 6
            kept-old-versions 2
            version-control t))
  #+END_SRC
* Use-package
  #+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
  #+END_SRC
* Diminish
#+BEGIN_SRC emacs-lisp
(use-package diminish)
#+END_SRC
* Helm
  #+BEGIN_SRC emacs-lisp
  (use-package helm
    :diminish helm-mode
    :init
    (helm-mode)
    :bind (("M-x" . helm-M-x)
	   ("C-x C-f" . helm-find-files)))
  #+END_SRC

* Ace window
  #+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :bind (("M-o" . ace-window)))
  #+END_SRC

* Latex
  #+BEGIN_SRC emacs-lisp
    (use-package auctex
      :defer t)
    (unless (functionp 'latex-extra-mode)
      (package-install 'latex-extra)
      (add-hook 'LaTeX-mode-hook #'latex-extra-mode))
    (setq-default TeX-master nil)
    (setq Tex-parse-self t)
    (setq Tex-auto-save t)
    (add-hook 'LaTeX-mode-hook (lambda () (TeX-fold-mode 1)))
  #+END_SRC

* Org mode
  #+BEGIN_SRC emacs-lisp
    (use-package org
      :bind
      (("\C-cc" . org-capture))
      :init
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
      (add-hook 'org-mode-hook (lambda () (org-indent-mode 1)))
      (add-hook 'org-mode-hook (lambda () (visual-line-mode)))
      (setq org-todo-keywords
          '((sequence "TODO" "IN PROGRESS"  "|" "DONE" "CANCELLED")))
      :config
      (setq org-use-speed-commands 1)
      (setq org-log-done 'time)
      )
  #+END_SRC
** Org pomodoro
  #+BEGIN_SRC emacs-lisp
    (use-package org-pomodoro)
  #+END_SRC
* Merlin
  #+BEGIN_SRC emacs-lisp
    (use-package merlin
      :diminish)
    (if (functionp 'merlin-mode)
        (let ((opam-share (ignore-errors (car (process-lines "opam" "config" "var"
                                                             "share")))))
          (when (and opam-share (file-directory-p opam-share))
            ;; Register Merlin
            (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share))
            (autoload 'merlin-mode "merlin" nil t nil)
            ;; Automatically start it in OCaml buffers
            (add-hook 'tuareg-mode-hook 'merlin-mode t)
            (add-hook 'caml-mode-hook 'merlin-mode t)
            ;; Use opam switch to lookup ocamlmerlin binary
            (setq merlin-command 'opam))))
  #+END_SRC

* Python
#+BEGIN_SRC emacs-lisp
  (progn
    (unless (functionp 'elpy-enable)
      (package-install 'elpy))
    (elpy-enable))
  (use-package anaconda-mode
    :init
    (add-hook 'python-mode-hook 'anaconda-mode))

  (eval-after-load "company"
   '(add-to-list 'company-backends 'company-anaconda))
#+END_SRC
* Which key

  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :init
      (which-key-mode))
  #+END_SRC

* Expand-region
  #+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind (("C-=" . er/expand-region)))
  #+END_SRC

* Notmuch
  #+BEGIN_SRC emacs-lisp
  (use-package notmuch)
  #+END_SRC

* Company
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :diminish
      :init
      (add-hook 'after-init-hook 'global-company-mode))
  #+END_SRC
* Smart-mode-line
  [[https://github.com/Malabarba/smart-mode-line][Github]]
  #+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line)
  #+END_SRC
* Magit
  #+BEGIN_SRC emacs-lisp
  (use-package magit)
  #+END_SRC
* Functions
  #+BEGIN_SRC emacs-lisp
    (defun indent ()
      "Indent the whole file"
      (interactive)
      (indent-region 1 (buffer-size)))

    (defun add-2-nl ()
      "Add two new lines"
      (interactive)
      (insert "\\newline\n\\newline")
      (indent))

    (defun insert-line-below ()
      "Add an empty below the line on which point lays"
      (interactive)
      (move-end-of-line nil)
      (newline))

    (defun get-buffer-or-create (buffername bufferfile)
      "Displays buffer BUFFERNAME.
    If buffer already exists, displays it. Otherwise, visits the file BUFFERFILE."
      (interactive)
      (switch-to-buffer
       (or (get-buffer buffername) (find-file bufferfile))))
  #+END_SRC
* Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
                 :diminish projectile-mode
                 :init
                 (projectile-mode)
                 :bind (("s-p" . projectile-command-map)
                        ("C-c p" . projectile-command-map)))
  #+END_SRC
* Multiple-cursors
  #+BEGIN_SRC emacs-lisp
    (use-package multiple-cursors
                 :bind (("C-S-c C-S-c" . mc/edit-lines)
                        ("C->" . mc/mark-next-like-this)
                        ("C-<" . mc/mark-previous-like-this)
                        ("C-c C-<" . mc/mark-all-like-this)))
  #+END_SRC
* Iedit
#+BEGIN_SRC emacs-lisp
  (use-package iedit)
#+END_SRC
* Highlight too long lines

#+BEGIN_SRC emacs-lisp
  (setq-default
   whitespace-line-column 80
   whitespace-style       '(face lines-tail tabs))
  (add-hook 'prog-mode-hook 'whitespace-mode)
#+END_SRC

* All the icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC
* Keybindings
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-o") 'insert-line-below)
    (global-set-key (kbd "<f8>")
                    (lambda ()
                      (interactive)
                      (get-buffer-or-create "todo.org" "~/notas/todo.org")))

    (global-set-key (kbd "<f7>")
                    (lambda ()
                      (interactive)
                      (get-buffer-or-create ".emacs" "~/.emacs")))
    (global-set-key (kbd "C-S-s") 'isearch-forward-symbol-at-point)
  #+END_SRC
